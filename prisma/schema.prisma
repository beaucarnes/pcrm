// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  birthday    DateTime?
  photoUrl    String?
  email       String?
  phone       String?
  notes       String?
  
  // Contact information
  address     String?
  company     String?
  jobTitle    String?
  
  // Tags for context
  tags        Tag[]

  // Events associated with this contact
  events      Event[]

  // Relationships where this contact is the source
  relationships    Relationship[] @relation("RelationshipSource")
  // Relationships where this contact is the target
  reverseRelationships Relationship[] @relation("RelationshipTarget")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  contacts  Contact[]
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  date        DateTime
  title       String
  description String?
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId   String
}

model Relationship {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  // The source contact in the relationship
  source        Contact  @relation("RelationshipSource", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId      String
  
  // The target contact in the relationship
  target        Contact  @relation("RelationshipTarget", fields: [targetId], references: [id], onDelete: Cascade)
  targetId      String
  
  // The type of relationship (e.g., "parent", "child", "spouse", "friend")
  type          String
  
  // Whether the relationship is mutual (e.g., spouse, friend) or directional (e.g., parent/child)
  isMutual      Boolean  @default(false)

  @@unique([sourceId, targetId, type])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
